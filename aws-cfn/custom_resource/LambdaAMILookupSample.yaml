---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation AMI Look Up Sample Template: Demonstrates how to
  dynamically specify an AMI ID. This template provisions an EC2 instance with an
  AMI ID that is based on the instance''s type and region. **WARNING** This template
  creates an Amazon EC2 instance. You will be billed for the AWS resources used if
  you create a stack from this template.'
Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: m1.small
    AllowedValues:
    - m1.small
    ConstraintDescription: Must be a valid EC2 instance type.
  ModuleName:
    Description: The name of the JavaScript file
    Type: String
    Default: amilookup
Mappings:
  AWSInstanceType2Arch:
    m1.small:
      Arch: PV64
    m1.medium:
      Arch: PV64
    m1.large:
      Arch: PV64
    m1.xlarge:
      Arch: PV64
    m2.xlarge:
      Arch: PV64
    m2.2xlarge:
      Arch: PV64
    m2.4xlarge:
      Arch: PV64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    c1.medium:
      Arch: PV64
    c1.xlarge:
      Arch: PV64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
Resources:
  SampleInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        Ref: InstanceType
      ImageId:
        Fn::GetAtt:
        - AMIInfo
        - Id
  AMIInfo:
    Type: Custom::AMIInfo
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - AMIInfoFunction
        - Arn
      Region:
        Ref: AWS::Region
      Architecture:
        Fn::FindInMap:
        - AWSInstanceType2Arch
        - Ref: InstanceType
        - Arch
  AMIInfoFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          var archToAMINamePattern = {
            "PV64": "amzn-ami-pv*x86_64-ebs",
            "HVM64": "amzn-ami-hvm*x86_64-gp2",
            "HVMG2": "amzn-ami-graphics-hvm*x86_64-ebs*"
          };
          var aws = require("aws-sdk");
          exports.handler = function(event, context) {
          console.log("REQUEST RECEIVED:\n" + JSON.stringify(event));
          // For Delete requests, immediately send a SUCCESS response.
          if (event.RequestType == "Delete") {
          sendResponse(event, context, "SUCCESS");
          return;
          }
          var responseStatus = "FAILED";
          var responseData = {};
          var ec2 = new aws.EC2({region: event.ResourceProperties.Region});
          var describeImagesParams = {
            Filters: [{ Name: "name", Values: [archToAMINamePattern[event.ResourceProperties.Architecture]]}],
            Owners: [event.ResourceProperties.Architecture == "HVMG2" ? "679593333241" : "amazon"]
          };
          // Get AMI IDs with the specified name pattern and owner
          ec2.describeImages(describeImagesParams, function(err, describeImagesResult) {
          if (err) {
            responseData = {Error: "DescribeImages call failed"};
            console.log(responseData.Error + ":\n", err);
          }
          else {
            var images = describeImagesResult.Images;
            // Sort images by name in decscending order. The names contain the AMI version, formatted as YYYY.MM.Ver.
            images.sort(function(x, y) { return y.Name.localeCompare(x.Name); });
            for (var j = 0; j < images.length; j++) {
                if (isBeta(images[j].Name)) continue;
                responseStatus = "SUCCESS";
                responseData["Id"] = images[j].ImageId;
                break;
            }
          }
          sendResponse(event, context, responseStatus, responseData);
          });
          };

                    // Check if the image is a beta or rc image. The Lambda function won't return any of those images.
          function isBeta(imageName) {
              return imageName.toLowerCase().indexOf("beta") > -1 || imageName.toLowerCase().indexOf(".rc") > -1;
          }


          // Send response to the pre-signed S3 URL 
          function sendResponse(event, context, responseStatus, responseData) {
          
              var responseBody = JSON.stringify({
                  Status: responseStatus,
                  Reason: "See the details in CloudWatch Log Stream: " + context.logStreamName,
                  PhysicalResourceId: context.logStreamName,
                  StackId: event.StackId,
                  RequestId: event.RequestId,
                  LogicalResourceId: event.LogicalResourceId,
                  Data: responseData
              });

              console.log("RESPONSE BODY:\n", responseBody);

              var https = require("https");
              var url = require("url");

              var parsedUrl = url.parse(event.ResponseURL);
              var options = {
                  hostname: parsedUrl.hostname,
                  port: 443,
                  path: parsedUrl.path,
                  method: "PUT",
                  headers: {
                      "content-type": "",
                      "content-length": responseBody.length
                  }
              };

              console.log("SENDING RESPONSE...\n");

              var request = https.request(options, function(response) {
                  console.log("STATUS: " + response.statusCode);
                  console.log("HEADERS: " + JSON.stringify(response.headers));
                  // Tell AWS Lambda that the function execution is done  
                  context.done();
              });

              request.on("error", function(error) {
                  console.log("sendResponse Error:" + error);
                  // Tell AWS Lambda that the function execution is done  
                  context.done();
              });

              // write data to request body
              request.write(responseBody);
              request.end();
          }
      Handler: "index.handler"
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: nodejs12.x
      Timeout: '30'
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - ec2:DescribeImages
            Resource: "*"
Outputs:
  AMIID:
    Description: The Amazon EC2 instance AMI ID.
    Value:
      Fn::GetAtt:
      - AMIInfo
      - Id